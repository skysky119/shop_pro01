// the semi-colon before function invocation is a safety net against concatenated
// scripts and/or other plugins which may not be closed properly.
;(function ( $, window, document, undefined ) {

    // undefined is used here as the undefined global variable in ECMAScript 3 is
    // mutable (ie. it can be changed by someone else). undefined isn't really being
    // passed in so we can ensure the value of it is truly undefined. In ES5, undefined
    // can no longer be modified.

    // window and document are passed through as local variable rather than global
    // as this (slightly) quickens the resolution process and can be more efficiently
    // minified (especially when both are regularly referenced in your plugin).

    // Create the defaults once
    var pluginName = "jomaloneDropdown",
        defaults = {
        propertyName: "value"
    };

    // The actual plugin constructor
    function Plugin ( element, options ) {
        this.element = element;
        // jQuery has an extend method which merges the contents of two or
        // more objects, storing the result in the first object. The first object
        // is generally empty as we don't want to alter the default options for
        // future instances of the plugin
        this.settings = $.extend( {}, defaults, options );
        this._defaults = defaults;
        this._name = pluginName;
        this.init();
    }

    Plugin.prototype = {
        init: function () {
            // Place initialization logic here
            // You already have access to the DOM element and
            // the options via the instance, e.g. this.element
            // and this.settings
            // you can add more functions like the one below and
            // call them like so: this.yourOtherFunction(this.element, this.settings).

            // Dropdown binding in our selector element
            var dropdown_element = $(this.element);

            dropdown_element.click(
              function(e){
                // e.stopPropagation();
              }
            ).delegate('dt a', 'click',
              function(e){
                e.preventDefault();
                dropdown_element.toggleClass('open');
                if (dropdown_element.hasClass('open')) {
                  dropdown_element.attr('aria-expanded', 'true');
                } else {
                  dropdown_element.attr('aria-expanded', 'false');
                }
                $('ul', dropdown_element).toggle();
              }
            ).delegate('li a', 'click',
              function(e) {
                e.preventDefault();
                var text = $(this).html();
                $('.select-text', dropdown_element).html(text);
                dropdown_element.removeClass('open');
                dropdown_element.attr('aria-expanded', 'false');
                $('dd ul', dropdown_element).hide();
                $('#fc-select').focus();
              }
            );

            $(document).bind('click', function(e) {
              var $clicked = $(e.target);
              if (! $clicked.parents().hasClass("custom-dropdown")) {
                dropdown_element.removeClass('open');
                // $(".custom-dropdown dd ul").hide();
                $('dd ul', dropdown_element).hide();
              }
           });

           var $listItems = $(".js-custom-dropdown li");
           dropdown_element.on('keydown', function (e) {
             var keyCode = site.getKeycode(e);
             switch (keyCode) {
               case 13:
                 if($(e.target).hasClass('custom-dropdown')) {
                   e.preventDefault();
                   $(this).find('dt a').trigger('click');
                   $current = $listItems.eq(0).find('.combo-selector');
                   $current.addClass('custom-outline').focus();
                 } else {
                   dropdown_element.attr('aria-expanded', 'false');
                   $current.trigger('click');
                 }
                break;
                case 40:  // Down key
                  e.preventDefault();
                  if ($current.length !== 0 ) {
                    $current.removeClass('custom-outline');
                    $current = $current.parent().next('li').find('.combo-selector');
                    $current.addClass('custom-outline').focus();
                  } else {
                    $current =  $listItems.last().find('.combo-selector').addClass('custom-outline').focus();
                  }
                break;
                case 38: // Up key
                  e.preventDefault();
                  if ($current.length !== 0) {
                    $current.removeClass('custom-outline');
                    $current = $current.parent().prev('li').find('.combo-selector');
                    $current.addClass('custom-outline').focus();
                  } else {
                    $current =  $listItems.first().find('.combo-selector').addClass('custom-outline').focus();
                  }
                break;
                case 27: // ESC Key
                  e.preventDefault();
                  dropdown_element.removeClass('open');
                  dropdown_element.attr('aria-expanded', 'false').focus();
                break;
              }
           });
        },
        yourOtherFunction: function () {
            // some logic
        }
    };

    // A really lightweight plugin wrapper around the constructor,
    // preventing against multiple instantiations
    $.fn[ pluginName ] = function ( options ) {
        return this.each(function() {
            if ( !$.data( this, "plugin_" + pluginName ) ) {
                $.data( this, "plugin_" + pluginName, new Plugin( this, options ) );
            }
        });
    };

})( jQuery, window, document );
